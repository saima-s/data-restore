/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/saima-s/data-restore/pkg/apis/saima.dev.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataSnapshotLister helps list DataSnapshots.
// All objects returned here must be treated as read-only.
type DataSnapshotLister interface {
	// List lists all DataSnapshots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DataSnapshot, err error)
	// DataSnapshots returns an object that can list and get DataSnapshots.
	DataSnapshots(namespace string) DataSnapshotNamespaceLister
	DataSnapshotListerExpansion
}

// dataSnapshotLister implements the DataSnapshotLister interface.
type dataSnapshotLister struct {
	indexer cache.Indexer
}

// NewDataSnapshotLister returns a new DataSnapshotLister.
func NewDataSnapshotLister(indexer cache.Indexer) DataSnapshotLister {
	return &dataSnapshotLister{indexer: indexer}
}

// List lists all DataSnapshots in the indexer.
func (s *dataSnapshotLister) List(selector labels.Selector) (ret []*v1.DataSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DataSnapshot))
	})
	return ret, err
}

// DataSnapshots returns an object that can list and get DataSnapshots.
func (s *dataSnapshotLister) DataSnapshots(namespace string) DataSnapshotNamespaceLister {
	return dataSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataSnapshotNamespaceLister helps list and get DataSnapshots.
// All objects returned here must be treated as read-only.
type DataSnapshotNamespaceLister interface {
	// List lists all DataSnapshots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DataSnapshot, err error)
	// Get retrieves the DataSnapshot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.DataSnapshot, error)
	DataSnapshotNamespaceListerExpansion
}

// dataSnapshotNamespaceLister implements the DataSnapshotNamespaceLister
// interface.
type dataSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataSnapshots in the indexer for a given namespace.
func (s dataSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1.DataSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DataSnapshot))
	})
	return ret, err
}

// Get retrieves the DataSnapshot from the indexer for a given namespace and name.
func (s dataSnapshotNamespaceLister) Get(name string) (*v1.DataSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("datasnapshot"), name)
	}
	return obj.(*v1.DataSnapshot), nil
}
